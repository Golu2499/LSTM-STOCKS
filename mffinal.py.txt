# -*- coding: utf-8 -*-
"""
Created on Tue Oct  1 16:39:06 2019

"""

import pandas as pd
import numpy as np
from nsepy import get_history
from datetime import date
#all nifty 50
dict1 = ['BPCL','HDFC','IOC','MARUTI','HDFC','TITAN','HINDUNILVR','EICHERMOT',
        'KOTAKBANK','ASIANPAINT','DRREDDY', 'SUNPHARMA', 'NTPC','LT', 'BAJAJFINSV','BRITANNIA',
        'BAJAJ-AUTO', 'HINDALCO', 'HEROMOTOCO', 'GAIL', 'POWERGRID', 'AXISBANK', 'INFY',
        'TECHM', 'BAJFINANCE', 'NESTLEIND', 'ITC', 'UPL', 'HCLTECH', 'VEDL', 'TCS', 
         'ICICIBANK', 'TATAMOTORS', 'RELIANCE', 'ADANIPORTS', 'WIPRO','ONGC', 'TATASTEEL',
         'ULTRACEMCO', 'COALINDIA', 'JSWSTEEL', 'INFRATEL', 'CIPLA','BHARTIARTL','GRASIM',
         'SBIN', 'INDUSINDBK','ZEEL','YESBANK']

#i = 'BPCL'

#for stock in dict1:
 #   stock = '%s' % stock
 #   stock= get_history(symbol=(stock),start=date(2018,1,1),end=date(2019,1,1))
 #   print(stock.head())
#the below method works
 #download data in dict2
dict2={}    
for d in dict1:
      dict2[d] = get_history(d,start=date(2018,1,1), end=date(2019,1,1))     
      dict2[d]=(dict2[d].iloc[:,3:13])



nifty = get_history(symbol='NIFTY', start=date(2018,1,1), end=date(2019,1,1),index=True)    
print(nifty.head(247))

'''i=30
nifty.iloc[i]['Close']

for i in range(0,247,30):
    if i+30>247:
        break
    else:
        pct_change=(nifty.iloc[i+30]['Close']-nifty.iloc[i]['Close'])*100/nifty.iloc[i+30]['Close']
        print(pct_change)
'''

#differentiate  volatile and non volatile.
volatile=[]
nonvolatile=[]
n=0
v=0

for d in dict2:
     for i in range(0,247,20):
        if i+20>247:
            break
        else:
           # print(d)
            pchange=(dict2[d].iloc[i+20]['Close']-dict2[d].iloc[i]['Close'])*100/dict2[d].iloc[i]['Close']
            pct_change=(nifty.iloc[i+20]['Close']-nifty.iloc[i]['Close'])*100/nifty.iloc[i]['Close']
            #print(pct_change)
            if abs(pct_change) > 0.65*abs(pchange):
                n=n+1
            else:
                v=v+1
     if n>v:
        nonvolatile.append(d)
     else:
        volatile.append(d)


#download volatile 
vtile={}
for v in volatile:
      vtile[v] = get_history(v,start=date(2018,1,1), end=date(2019,1,1))     
      vtile[v]=(vtile[v].iloc[:,3:13])

#download non volatile.
nvtile={}
for nv in nonvolatile:
      nvtile[nv] = get_history(nv,start=date(2018,1,1), end=date(2019,1,1))     
      nvtile[nv]=(nvtile[nv].iloc[:,3:13])

#non volatile mf



import time
import datetime
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import matplotlib.dates as mdates
import mpl_finance
import matplotlib
import pylab
matplotlib.rcParams.update({'font.size': 9})      





#function  for relative strength index
def rsiFunc(prices, n=14):
    deltas = np.diff(prices)
    seed = deltas[:n+1]
    up = seed[seed>=0].sum()/n
    down = -seed[seed<0].sum()/n
    rs = up/down
    rsi = np.zeros_like(prices)
    rsi[:n] = 100. - 100./(1.+rs)

    for i in range(n, len(prices)):
        delta = deltas[i-1] # cause the diff is 1 shorter

        if delta>0:
            upval = delta
            downval = 0.
        else:
            upval = 0.
            downval = -delta

        up = (up*(n-1) + upval)/n
        down = (down*(n-1) + downval)/n

        rs = up/down
        rsi[i] = 100. - 100./(1.+rs)

    return rsi


def movingaverage(values,window):
    weigths = np.repeat(1.0, window)/window
    smas = np.convolve(values, weigths, 'valid')
    return smas # as a numpy array


def ExpMovingAverage(values, window):
    weights = np.exp(np.linspace(-1., 0., window))
    weights /= weights.sum()
    a =  np.convolve(values, weights, mode='full')[:len(values)]
    a[:window] = a[window]
    return a


def computeMACD(x, slow=50, fast=12):
    """
    compute the MACD (Moving Average Convergence/Divergence) using a fast and slow exponential moving avg'
    return value is emaslow, emafast, macd which are len(x) arrays
    """
    emaslow = ExpMovingAverage(x, slow)
    emafast = ExpMovingAverage(x, fast)
    return emaslow, emafast, emafast - emaslow




vlist=[]
for v in vtile:
    rsi = rsiFunc(vtile[v].iloc[:]['Close'])
    emaslow, emafast, macd = computeMACD(vtile[v].iloc[:]['Close'])
    if emafast[-1] > emaslow[-1]:
        macdrating = 8
    else:
        macdrating = 0

    print(rsi[-1])
    if rsi[-1] < 25:
        rsirating = 8
    if 25 < rsi[-1] < 60:
        rsirating = 4
    else:
        rsirating = 0
        print("Stock over-bought")
        
    technicalrating = macdrating + rsirating
    print(technicalrating)    
    if technicalrating >= 12:
        vlist.append(v)
    
    
nlist=[]    
for nv in nvtile:
    rsi = rsiFunc(nvtile[nv].iloc[:]['Close'])
    emaslow, emafast, macd = computeMACD(nvtile[nv].iloc[:]['Close'])
    if emafast[-1] > emaslow[-1]:
        macdrating = 8
    else:
        macdrating = 0

    print(rsi[-1])
    if rsi[-1] < 25:
        rsirating = 8
    if 25 < rsi[-1] < 60:
        rsirating = 4
    else:
        rsirating = 0
        print("Stock over-bought")
        
    technicalrating = macdrating + rsirating
    print(technicalrating)        
        
    if technicalrating >= 12:
        nlist.append(nv)
        
#graham value invwsting 
graham1=[]
graham2=[]
graham3=[]
graham4=[]

nodefault =[]        

                         

dictem = ['BPCL','IOC','MARUTI','HDFCBANK','TITAN','HINDUNILVR','EICHERMOT',
        'ASIANPAINT','DRREDDY', 'SUNPHARMA', 'NTPC','LT', 'BAJAJFINSV','BRITANNIA',
        'BAJAJ-AUTO', 'HINDALCO', 'HEROMOTOCO', 'GAIL', 'POWERGRID', 'INFY',
        'TECHM', 'BAJFINANCE', 'ITC', 'UPL', 'HCLTECH', 'VEDL', 'TCS', 
          'TATAMOTORS', 'RELIANCE', 'ADANIPORTS', 'WIPRO','ONGC', 'TATASTEEL',
         'ULTRACEMCO', 'COALINDIA', 'JSWSTEEL', 'INFRATEL', 'CIPLA','BHARTIARTL','GRASIM',
          'ZEEL']

for i in dictem:
    tcs = pd.read_csv(i+' Balance Sheet.csv',header=1)                                               
    tcs=tcs.replace(np.nan,0)


    a=tcs.at[10,'2019-03'] #total current assets;
    tcs.at[10,'2019-03']
    b=tcs.at[40,'2019-03']#total current assets;
    if (a>b):
        graham1.append(i)
        
        if tcs.at[10,'2019-03'] > 1.5*(tcs.at[30,'2019-03']):
            #current ratio
            graham3.append(i)
            #graham2.append(tcs)
            #check if the shareholders equity rose 
            if (tcs.at[21,'2010-03']  < tcs.at[21,'2019-03']) and   (tcs.at[21,'2015-03']  < tcs.at[21,'2019-03']) and  (tcs.at[21,'2018-03']  < tcs.at[21,'2019-03']):
                #graham2.append(tcs)
                
                if tcs.at[17,'2019-03'] < 0.1*(tcs.at[21,'2019-03']):
                    #intangible assets should be less than 10 percent
                    graham4.append(i)
                    
                    if (tcs.at[3,'2019-03'] + tcs.at[4,'2019-03']) > (tcs.at[26,'2019-03'] + tcs.at[27,'2019-03'] + tcs.at[28,'2019-03'] + tcs.at[29,'2019-03']):
                        #cash and cash equivalents plus short term investment >
                        #short term debt plus accounts and taxes payble plus other 
                        #liablities so current debt can be paid off.
                        #graham2.append(tcs)
                        nodefault.append(i)
                        
                        if((tcs.at[44,'2010-03']  < tcs.at[44,'2019-03']) and   (tcs.at[44,'2015-03']  < tcs.at[44,'2019-03']) and  (tcs.at[44,'2018-03']  < tcs.at[44,'2019-03']) or (tcs.at[34,'2010-03']  < tcs.at[34,'2019-03']) and   (tcs.at[34,'2015-03']  < tcs.at[34,'2019-03']) and  (tcs.at[34,'2018-03']  < tcs.at[34,'2019-03'])):
                            #check increasing retained earnings for the company
                            graham2.append(i)
                         

longtermnorisk=[]
longtermrisk=[]
#long term  
longtermnorisk=nlist.intersection(graham4)
lontermrisk=vlist.intersection(graham4)
#fund with strong fundamnetals with lesser default chances
graham4
#short term volatile and non vlatile
nlist
vlist
#dividends mutual fund->



#CAGR
c=0
ppchang=0
for i in longtermrisk:
    past = get_history(i,start=date(2019,1,1),end=date(2019,1,2))
    ppast = get_history(i,start=date(2014,1,1),end=date(2014,1,2))
    pchang = ((ppast-past)/ppast)*100
    ppchang = ppchang+pchang
    c=c+1
    
    if (i == longtermrisk[-1]):
        ppchang = ppchang/c
        
    else:
        continue
print("CAGR for Long term risk free fund: ",ppchang)    
    
    
c=0
ppchang=0
for i in longternomrisk:
    past = get_history(i,start=date(2019,1,1),end=date(2019,1,2))
    ppast = get_history(i,start=date(2014,1,1),end=date(2014,1,2))
    pchang = ((ppast-past)/ppast)*100
    ppchang = ppchang+pchang
    c=c+1
    
    if (i == longtermnorisk[-1]):
        ppchang = ppchang/c
        
    else:
        continue
print("CAGR for Long term high risk fund: ",ppchang)    
        



c=0
ppchang=0
for i in graham4:
    past = get_history(i,start=date(2019,1,1),end=date(2019,1,2))
    ppast = get_history(i,start=date(2014,1,1),end=date(2014,1,2))
    pchang = ((ppast-past)/ppast)*100
    ppchang = ppchang+pchang
    c=c+1
    
    if (i == graham4[-1]):
        ppchang = ppchang/c
        
    else:
        continue
print("CAGR for No default fund",ppchang)
 


c=0
ppchang=0
for i in nlist:
    past = get_history(i,start=date(2019,1,1),end=date(2019,1,2))
    ppast = get_history(i,start=date(2014,1,1),end=date(2014,1,2))
    pchang = ((ppast-past)/ppast)*100
    ppchang = ppchang+pchang
    c=c+1
    
    if (i == nlist[-1]):
        ppchang = ppchang/c
        
    else:
        continue
    
print("CAGR for short term low risk fund is :",ppchang)

    
    
c=0
ppchang=0
for i in vtile:
    past = get_history(i,start=date(2019,1,1),end=date(2019,1,2))
    ppast = get_history(i,start=date(2014,1,1),end=date(2014,1,2))
    pchang = ((ppast-past)/ppast)*100
    ppchang = ppchang+pchang
    c=c+1
    
    if (i == vtile[-1]):
        ppchang = ppchang/c
        
    else:
        continue
print("CAGR for short term low risk fund is :",ppchang)
        
    